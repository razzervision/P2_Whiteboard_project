#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("myexpressapp:server");
const http = require("http");

const socket = require("socket.io");


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = socket(server, { 
    cors : {origin: process.env.CORS_ORIGIN || "*"},
    methods: ["GET", "POST"],
    allowedHeaders: ["my-custom-header"],
    credentials: true
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
    case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
}

// Socket.io connection
io.on("connection", (socket) => {
    console.log("New user connected");
    
    socket.on("draw", (data) => {
        socket.broadcast.emit("draw", data);
    });

    socket.on("clearCanvas", () => {
        socket.broadcast.emit("clearCanvas");
    });

    socket.on("addCanvas", (data) => {
        socket.broadcast.emit("addCanvas", data);
    });

    socket.on("changeCanvas", (data) => {
        socket.broadcast.emit("changeCanvas", data);
    });
    
    socket.on("removeMouse", () => {
        socket.broadcast.emit("removeMouse");
    });

    socket.on("undo", () => {
        socket.broadcast.emit("undo");
    });

    socket.on("code", (data) => {
        socket.broadcast.emit("code", data);
    });

    socket.on("language", (data) => {
        socket.broadcast.emit("language", data);
    });

    socket.on("quizPing", () => {
        socket.broadcast.emit("quizPing");
    });

    socket.on("uploadePicture", () => {
        socket.broadcast.emit("uploadePicture");
    });

    socket.on("saveDataSocket", (data) => {
        socket.broadcast.emit("saveDataSocket", data);
    });

    socket.on("pause", () => {
        socket.broadcast.emit("pause");
    });

    socket.on("disconnect", () => {
        console.log("User disconnected");
    });
});

// timezone
process.env.TZ = "Europe/Copenhagen";
